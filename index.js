require('dotenv').config();
const express = require('express');
const NodeCache = require('node-cache');
const TelegramBot = require('node-telegram-bot-api');
const deepEqual = require('deep-equal');
const fs = require('fs');
const path = require('path');
const cors = require('cors');

const app = express();
const port = process.env.PORT || 3001;

// –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
const chatIdsFilePath = path.join(__dirname, 'chatIds.json');
const dataFilePath = path.join(__dirname, 'data.json');

// ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –±–æ—Ç–∞ (–¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ /chats)
const adminIds = [];

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è –¥–æ–º–µ–Ω–∞ stickerdom.store
const corsOptions = {
  origin: 'https://stickerdom.store',
  methods: ['GET', 'POST'],
  allowedHeaders: ['Content-Type', 'Authorization'],
  credentials: true
};

app.use(cors(corsOptions));

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–µ—à–∞
const cache = new NodeCache({ stdTTL: 0, checkperiod: 0 }); // –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –≤—Ä–µ–º—è —Ö—Ä–∞–Ω–µ–Ω–∏—è

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
const telegramToken = process.env.TELEGRAM_BOT_TOKEN;
let chatIds = [];
let bot = null;

// –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
const mainMenuButtons = {
  reply_markup: {
    keyboard: [
      ['üìã –°–ø–∏—Å–æ–∫ –∫–æ–ª–ª–µ–∫—Ü–∏–π', 'üîç –ü–æ–∏—Å–∫ –∫–æ–ª–ª–µ–∫—Ü–∏–∏'],
      ['üìä –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏', '‚öôÔ∏è –ü–æ–º–æ—â—å'],
      ['üîï –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è']
    ],
    resize_keyboard: true
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –∫–æ–ª–ª–µ–∫—Ü–∏–π
function getCollectionsNavigationMarkup(page, totalPages) {
  const buttons = [];
  const row = [];
  
  if (page > 1) {
    row.push({
      text: '‚¨ÖÔ∏è –ü—Ä–µ–¥. —Å—Ç—Ä.',
      callback_data: `collections_${page - 1}`
    });
  }
  
  row.push({
    text: `${page} –∏–∑ ${totalPages}`,
    callback_data: 'current_page'
  });
  
  if (page < totalPages) {
    row.push({
      text: '–°–ª–µ–¥. —Å—Ç—Ä. ‚û°Ô∏è',
      callback_data: `collections_${page + 1}`
    });
  }
  
  buttons.push(row);
  
  return {
    inline_keyboard: buttons
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏
function getCollectionButtonsMarkup(id) {
  return {
    inline_keyboard: [
      [
        {
          text: 'üì≤ –û—Ç–∫—Ä—ã—Ç—å –≤ StickerDom',
          url: `https://t.me/sticker_bot/app?startapp=collection_${id}`
        }
      ],
      [
        {
          text: '‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É',
          callback_data: 'collections_1'
        }
      ]
    ]
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è ID —á–∞—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
function loadChatIds() {
  try {
    if (fs.existsSync(chatIdsFilePath)) {
      const data = fs.readFileSync(chatIdsFilePath, 'utf8');
      const parsedData = JSON.parse(data);
      chatIds = parsedData.chatIds || [];
      console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${chatIds.length} ID —á–∞—Ç–æ–≤`);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ ID —á–∞—Ç–æ–≤:', error);
    chatIds = [];
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ID —á–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª
function saveChatIds() {
  try {
    fs.writeFileSync(chatIdsFilePath, JSON.stringify({ chatIds }, null, 2));
    console.log(`–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${chatIds.length} ID —á–∞—Ç–æ–≤`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ ID —á–∞—Ç–æ–≤:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
function loadData() {
  try {
    if (fs.existsSync(dataFilePath)) {
      const rawData = fs.readFileSync(dataFilePath, 'utf8');
      const data = JSON.parse(rawData);
      console.log('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞');
      return data;
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞:', error);
  }
  return null;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
function saveData(data) {
  try {
    fs.writeFileSync(dataFilePath, JSON.stringify(data, null, 2));
    console.log('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª');
    return true;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª:', error);
    return false;
  }
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º ID —á–∞—Ç–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
loadChatIds();

// –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ –∏ –ø–æ–º–µ—â–∞–µ–º –≤ –∫–µ—à
const savedData = loadData();
if (savedData) {
  cache.set('lastData', savedData);
  console.log('–î–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –∫–µ—à');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Å—Ç–∏–∫–µ—Ä–æ–≤
function formatCollectionData(collection) {
  if (!collection) return '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏';
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ Markdown
  function escapeMarkdown(text) {
    if (!text) return '';
    // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown: _ * [ ] ( ) ~ ` > # + - = | { } . !
    return text.toString()
      .replace(/([_*[\]()~`>#+=|{}.!\\-])/g, '\\$1');
  }
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞
  function limitText(text, maxLength = 200) {
    if (!text) return '';
    if (text.length <= maxLength) return text;
    return text.substring(0, maxLength) + '...';
  }
  
  let result = `üè∑ *${escapeMarkdown(collection.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}*\n`;
  
  if (collection.description) {
    result += `üìù _${escapeMarkdown(limitText(collection.description))}_\n\n`;
  }
  
  if (collection.creator?.name) {
    result += `üë§ *–°–æ–∑–¥–∞—Ç–µ–ª—å*: ${escapeMarkdown(collection.creator.name)}\n`;
  }
  
  if (collection.id) {
    result += `üÜî *ID*: ${collection.id}\n`;
  }
  
  if (collection.status) {
    result += `üìä *–°—Ç–∞—Ç—É—Å*: ${escapeMarkdown(collection.status)}\n`;
  }
  
  if (collection.badges && collection.badges.length > 0) {
    result += `üèÖ *–ó–Ω–∞—á–∫–∏*: ${collection.badges.map(badge => escapeMarkdown(badge)).join(', ')}\n`;
  }
  
  if (collection.creator?.social_links && collection.creator.social_links.length > 0) {
    result += `\nüîó *–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏*:\n`;
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö —Å—Å—ã–ª–æ–∫
    const maxLinks = 3;
    const links = collection.creator.social_links.slice(0, maxLinks);
    links.forEach(link => {
      result += `- ${escapeMarkdown(link.type)}: ${escapeMarkdown(limitText(link.url, 50))}\n`;
    });
    if (collection.creator.social_links.length > maxLinks) {
      result += `- –∏ –µ—â–µ ${collection.creator.social_links.length - maxLinks} —Å—Å—ã–ª–æ–∫\n`;
    }
  }
  
  // –ù–µ –≤—ã–≤–æ–¥–∏–º –º–µ–¥–∏–∞-—Ñ–∞–π–ª—ã –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –æ–ø–∏—Å–∞–Ω–∏–∏, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –º–æ–≥—É—Ç –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º–∏
  // –∏ –≤—ã–∑—ã–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º
  
  return result;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π
function formatCollectionsList(collections, page = 1, pageSize = 5) {
  if (!collections || !collections.length) return '–ö–æ–ª–ª–µ–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã';
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ Markdown
  function escapeMarkdown(text) {
    if (!text) return '';
    // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown: _ * [ ] ( ) ~ ` > # + - = | { } . !
    return text.toString()
      .replace(/([_*[\]()~`>#+=|{}.!\\-])/g, '\\$1');
  }
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞
  function limitText(text, maxLength = 50) {
    if (!text) return '';
    if (text.length <= maxLength) return text;
    return text.substring(0, maxLength) + '...';
  }
  
  const totalPages = Math.ceil(collections.length / pageSize);
  const startIdx = (page - 1) * pageSize;
  const endIdx = Math.min(startIdx + pageSize, collections.length);
  const pageCollections = collections.slice(startIdx, endIdx);
  
  let result = `üìã *–°–ø–∏—Å–æ–∫ –∫–æ–ª–ª–µ–∫—Ü–∏–π* (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${page}/${totalPages})\n\n`;
  
  pageCollections.forEach(collection => {
    result += `üè∑ *${escapeMarkdown(collection.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}* (ID: ${collection.id})\n`;
    if (collection.description) {
      // –û–±—Ä–µ–∑–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –¥–ª–∏–Ω–Ω–æ–µ
      const shortDesc = limitText(collection.description);
      result += `üìù _${escapeMarkdown(shortDesc)}_\n`;
    }
    result += `üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å: ${escapeMarkdown(collection.creator?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n`;
  });
  
  result += `\n–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /collection [ID]`;
  
  return result;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞ Telegram
if (telegramToken) {
  bot = new TelegramBot(telegramToken, { polling: true });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
  bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç ID
    if (!chatIds.includes(chatId)) {
      chatIds.push(chatId);
      saveChatIds();
      bot.sendMessage(
        chatId, 
        '–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö —Å—Ç–∏–∫–µ—Ä–æ–≤.',
        mainMenuButtons
      );
    } else {
      bot.sendMessage(
        chatId, 
        '–ë–æ—Ç —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞. –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö.',
        mainMenuButtons
      );
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stop –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  bot.onText(/\/stop/, (msg) => {
    const chatId = msg.chat.id;
    const index = chatIds.indexOf(chatId);
    
    if (index !== -1) {
      chatIds.splice(index, 1);
      saveChatIds();
      bot.sendMessage(chatId, '–í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.');
    } else {
      bot.sendMessage(chatId, '–í–∞—à —á–∞—Ç –Ω–µ –±—ã–ª –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.');
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /chats –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —á–∞—Ç–æ–≤
  bot.onText(/\/chats/, (msg) => {
    const chatId = msg.chat.id;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if (adminIds.length === 0 || adminIds.includes(chatId)) {
      if (chatIds.length > 0) {
        const chatsList = chatIds.join('\n');
        bot.sendMessage(chatId, `–°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤:\n${chatsList}`);
      } else {
        bot.sendMessage(chatId, '–ù–µ—Ç –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤.');
      }
    } else {
      bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.');
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /admin –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  bot.onText(/\/admin (.+)/, (msg, match) => {
    const chatId = msg.chat.id;
    const adminPassword = match[1];
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–∞—Ä–æ–ª—è, –Ω–∞–ø—Ä–∏–º–µ—Ä:
    if (adminPassword === 'thaozefre') {
      if (!adminIds.includes(chatId)) {
        adminIds.push(chatId);
        bot.sendMessage(chatId, '–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±–æ—Ç–∞.');
      } else {
        bot.sendMessage(chatId, '–í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞.');
      }
    } else {
      bot.sendMessage(chatId, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å.');
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /data –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
  bot.onText(/\/data/, (msg) => {
    const chatId = msg.chat.id;
    
    const lastData = cache.get('lastData');
    
    if (lastData) {
      if (lastData.data && Array.isArray(lastData.data)) {
        const collectionsCount = lastData.data.length;
        bot.sendMessage(
          chatId, 
          `–í –±–∞–∑–µ –Ω–∞–π–¥–µ–Ω–æ ${collectionsCount} –∫–æ–ª–ª–µ–∫—Ü–∏–π.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:`,
          {
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üìã –°–ø–∏—Å–æ–∫ –∫–æ–ª–ª–µ–∫—Ü–∏–π', callback_data: 'collections_1' }],
                [{ text: 'üîç –ü–æ–∏—Å–∫ –ø–æ ID', callback_data: 'search_collection' }]
              ]
            }
          }
        );
      } else {
        const formattedData = JSON.stringify(lastData, null, 2).substring(0, 3000); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
        bot.sendMessage(chatId, `–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n\n${formattedData}`);
      }
    } else {
      bot.sendMessage(chatId, '–î–∞–Ω–Ω—ã–µ –µ—â–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã.');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /collections –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π
  bot.onText(/\/collections(?:\s+(\d+))?/, (msg, match) => {
    const chatId = msg.chat.id;
    const page = match[1] ? parseInt(match[1]) : 1;
    
    sendCollectionsList(chatId, page);
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /collection [ID] –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
  bot.onText(/\/collection\s+(\d+)/, (msg, match) => {
    const chatId = msg.chat.id;
    const collectionId = parseInt(match[1]);
    
    sendCollectionInfo(chatId, collectionId);
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø—Ä–∞–≤–∫–∏
  bot.onText(/\/help/, (msg) => {
    const chatId = msg.chat.id;
    
    sendHelpMessage(chatId);
  });
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
  function sendHelpMessage(chatId) {
    const helpText = `
*StickerBot - –ü–æ–º–æ—â—å*

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
/stop - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
/data - –ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
/collections [—Å—Ç—Ä–∞–Ω–∏—Ü–∞] - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π
/collection [ID] - –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/stopnotifications - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Ç–µ–∫—É—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö

*–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:*
- –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
- –î–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –Ω–∞ —Å–∞–π—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å –≤ StickerDom"

*–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*
/resetcache - –°–±—Ä–æ—Å–∏—Ç—å –∫–µ—à –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
/removecollection [ID] - –£–¥–∞–ª–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –∏–∑ –∫–µ—à–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
    `;
    
    bot.sendMessage(chatId, helpText, {
      parse_mode: 'Markdown',
      reply_markup: mainMenuButtons.reply_markup
    });
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  bot.onText(/\/stopnotifications/, (msg) => {
    const chatId = msg.chat.id;
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const unreadNotifications = cache.get('unreadNotifications') || {};
    let notificationsCount = 0;
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
    Object.keys(unreadNotifications).forEach(key => {
      if (key.startsWith(`${chatId}_`)) {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
        if (unreadNotifications[key].intervalId) {
          clearInterval(unreadNotifications[key].intervalId);
        }
        // –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–∑ –∫–µ—à–∞
        delete unreadNotifications[key];
        notificationsCount++;
      }
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–µ—à
    cache.set('unreadNotifications', unreadNotifications);
    
    if (notificationsCount > 0) {
      bot.sendMessage(chatId, `‚úÖ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${notificationsCount} –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.`);
    } else {
      bot.sendMessage(chatId, 'üìù –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.');
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏–∑ –∫–µ—à–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  bot.onText(/\/removecollection (.+)/, (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if (adminIds.includes(userId) || adminIds.length === 0) { // –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –ø—É—Å—Ç, —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ–º
      const collectionId = parseInt(match[1]);
      
      if (isNaN(collectionId)) {
        bot.sendMessage(chatId, '‚ùå *–û—à–∏–±–∫–∞*\n\nID –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.', { parse_mode: 'Markdown' });
        return;
      }
      
      const lastData = cache.get('lastData');
      
      if (!lastData || !lastData.data || !Array.isArray(lastData.data)) {
        bot.sendMessage(chatId, '‚ùå *–û—à–∏–±–∫–∞*\n\n–î–∞–Ω–Ω—ã–µ –æ –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –∫–µ—à–µ.', { parse_mode: 'Markdown' });
        return;
      }
      
      // –ù–∞—Ö–æ–¥–∏–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –≤ –∫–µ—à–µ
      const collectionIndex = lastData.data.findIndex(item => item.id === collectionId);
      
      if (collectionIndex === -1) {
        bot.sendMessage(chatId, `‚ùå *–û—à–∏–±–∫–∞*\n\n–ö–æ–ª–ª–µ–∫—Ü–∏—è —Å ID ${collectionId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–µ—à–µ.`, { parse_mode: 'Markdown' });
        return;
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–¥–∞–ª—è–µ–º–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
      const removedCollection = lastData.data[collectionIndex];
      
      // –£–¥–∞–ª—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –∏–∑ –º–∞—Å—Å–∏–≤–∞
      lastData.data.splice(collectionIndex, 1);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
      cache.set('lastData', lastData);
      
      // –°–æ–æ–±—â–∞–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏
      bot.sendMessage(
        chatId, 
        `‚úÖ *–ö–æ–ª–ª–µ–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∫–µ—à–∞*\n\nID: ${collectionId}\n–ù–∞–∑–≤–∞–Ω–∏–µ: ${removedCollection.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}\n\n–ü—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —ç—Ç–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è –±—É–¥–µ—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–∞–∫ –Ω–æ–≤–∞—è.`, 
        { parse_mode: 'Markdown' }
      );
      
      console.log(`–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${msg.from.username || msg.from.first_name} (ID: ${userId}) —É–¥–∞–ª–∏–ª –∫–æ–ª–ª–µ–∫—Ü–∏—é ${collectionId} –∏–∑ –∫–µ—à–∞`);
    } else {
      bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ. –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏–∑ –∫–µ—à–∞.');
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /resetcache –¥–ª—è —Å–±—Ä–æ—Å–∞ –∫–µ—à–∞
  bot.onText(/\/resetcache/, (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if (adminIds.includes(userId) || adminIds.length === 0) {
      // –û—á–∏—â–∞–µ–º –∫–µ—à
      cache.flushAll();
      console.log('–ö–µ—à —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω –ø–æ –∫–æ–º–∞–Ω–¥–µ –∏–∑ Telegram');
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
      const data = loadData();
      if (data) {
        // –ü–æ–º–µ—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–µ—à
        cache.set('lastData', data);
        console.log('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞ –≤ –∫–µ—à');
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        bot.sendMessage(chatId, 'üîÑ *–ö–µ—à —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω*\n\n–î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞. –ù–æ–≤—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –±—É–¥—É—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.', { 
          parse_mode: 'Markdown' 
        });
      } else {
        bot.sendMessage(chatId, '‚ùå *–û—à–∏–±–∫–∞*\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞.', { 
          parse_mode: 'Markdown' 
        });
      }
    } else {
      bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ. –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å –∫–µ—à.');
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é)
  bot.on('message', (msg) => {
    if (!msg.text || msg.text.startsWith('/')) return;
    
    const chatId = msg.chat.id;
    
    switch(msg.text) {
      case 'üìã –°–ø–∏—Å–æ–∫ –∫–æ–ª–ª–µ–∫—Ü–∏–π':
        sendCollectionsList(chatId, 1);
        break;
        
      case 'üîç –ü–æ–∏—Å–∫ –∫–æ–ª–ª–µ–∫—Ü–∏–∏':
        bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ ID –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: "–ø–æ–∏—Å–∫ ID", –Ω–∞–ø—Ä–∏–º–µ—Ä "–ø–æ–∏—Å–∫ 23"');
        break;
        
      case 'üìä –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏':
        if (chatIds.includes(chatId)) {
          bot.sendMessage(chatId, '–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö.');
        } else {
          bot.sendMessage(
            chatId, 
            '–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏.',
            {
              reply_markup: {
                inline_keyboard: [
                  [{ text: '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data: 'subscribe' }]
                ]
              }
            }
          );
        }
        break;
        
      case '‚öôÔ∏è –ü–æ–º–æ—â—å':
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø—Ä–∞–≤–∫—É –Ω–∞–ø—Ä—è–º—É—é
        sendHelpMessage(chatId);
        break;
        
      case 'üîï –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è':
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const unreadNotifications = cache.get('unreadNotifications') || {};
        let notificationsCount = 0;
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
        Object.keys(unreadNotifications).forEach(key => {
          if (key.startsWith(`${chatId}_`)) {
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
            if (unreadNotifications[key].intervalId) {
              clearInterval(unreadNotifications[key].intervalId);
            }
            // –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–∑ –∫–µ—à–∞
            delete unreadNotifications[key];
            notificationsCount++;
          }
        });
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–µ—à
        cache.set('unreadNotifications', unreadNotifications);
        
        if (notificationsCount > 0) {
          bot.sendMessage(chatId, `‚úÖ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${notificationsCount} –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.`);
        } else {
          bot.sendMessage(chatId, 'üìù –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.');
        }
        break;
        
      default:
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–∏—Å–∫–∞
        if (msg.text.toLowerCase().startsWith('–ø–æ–∏—Å–∫')) {
          const idMatch = msg.text.match(/–ø–æ–∏—Å–∫\s+(\d+)/i);
          if (idMatch && idMatch[1]) {
            const collectionId = parseInt(idMatch[1]);
            sendCollectionInfo(chatId, collectionId);
          } else {
            bot.sendMessage(chatId, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: "–ø–æ–∏—Å–∫ ID", –Ω–∞–ø—Ä–∏–º–µ—Ä "–ø–æ–∏—Å–∫ 23"');
          }
        }
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏
  bot.on('callback_query', (query) => {
    const chatId = query.message.chat.id;
    const data = query.data;
    
    if (data === 'current_page') {
      // –ü—Ä–æ—Å—Ç–æ —Å–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
      bot.answerCallbackQuery(query.id);
      return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—á–∏—Ç–∞–Ω–æ" –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö
    if (data.startsWith('read_notification_')) {
      const collectionId = parseInt(data.split('_')[2]);
      const unreadNotifications = cache.get('unreadNotifications') || {};
      const notificationKey = `${chatId}_${collectionId}`;
      
      if (unreadNotifications[notificationKey]) {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if (unreadNotifications[notificationKey].intervalId) {
          clearInterval(unreadNotifications[notificationKey].intervalId);
          unreadNotifications[notificationKey].intervalId = null;
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        bot.answerCallbackQuery(query.id, { text: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ" });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –æ–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ
        bot.editMessageReplyMarkup(
          {
            inline_keyboard: [
              [
                { text: 'üì≤ –û—Ç–∫—Ä—ã—Ç—å –≤ StickerDom', url: `https://t.me/sticker_bot/app?startapp=collection_${collectionId}` }
              ]
            ]
          },
          {
            chat_id: chatId,
            message_id: query.message.message_id
          }
        );
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        const messageIds = unreadNotifications[notificationKey].messageIds || [];
        messageIds.forEach(msgId => {
          if (msgId !== query.message.message_id) { // –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–≤–∞–∂–¥—ã
            bot.editMessageReplyMarkup(
              {
                inline_keyboard: [
                  [
                    { text: 'üì≤ –û—Ç–∫—Ä—ã—Ç—å –≤ StickerDom', url: `https://t.me/sticker_bot/app?startapp=collection_${collectionId}` }
                  ]
                ]
              },
              {
                chat_id: chatId,
                message_id: msgId
              }
            ).catch(err => {
              console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ${msgId}: ${err.message}`);
            });
          }
        });
        
        // –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏
        delete unreadNotifications[notificationKey];
        cache.set('unreadNotifications', unreadNotifications);
        
        console.log(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ ${collectionId} –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${query.from.username || query.from.first_name} (ID: ${query.from.id})`);
      } else {
        bot.answerCallbackQuery(query.id, { text: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–∂–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ" });
      }
      return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —É–∂–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if (data === 'notification_already_read') {
      bot.answerCallbackQuery(query.id, { text: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–∂–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ" });
      return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π
    if (data.startsWith('collections_')) {
      const page = parseInt(data.split('_')[1]);
      sendCollectionsList(chatId, page);
      bot.answerCallbackQuery(query.id);
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    if (data === 'search_collection') {
      bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ ID –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: "–ø–æ–∏—Å–∫ ID", –Ω–∞–ø—Ä–∏–º–µ—Ä "–ø–æ–∏—Å–∫ 23"');
      bot.answerCallbackQuery(query.id);
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    if (data === 'subscribe') {
      if (!chatIds.includes(chatId)) {
        chatIds.push(chatId);
        saveChatIds();
        bot.sendMessage(chatId, '–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!');
      } else {
        bot.sendMessage(chatId, '–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.');
      }
      bot.answerCallbackQuery(query.id);
    }
  });
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π
  function sendCollectionsList(chatId, page) {
    const lastData = cache.get('lastData');
    
    if (lastData && lastData.data && Array.isArray(lastData.data)) {
      const collections = lastData.data;
      const pageSize = 5;
      const totalPages = Math.ceil(collections.length / pageSize);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      if (page < 1) page = 1;
      if (page > totalPages) page = totalPages;
      
      const formattedList = formatCollectionsList(collections, page, pageSize);
      
      const navigationMarkup = getCollectionsNavigationMarkup(page, totalPages);
      
      bot.sendMessage(chatId, formattedList, {
        parse_mode: 'Markdown',
        reply_markup: navigationMarkup
      });
    } else {
      bot.sendMessage(chatId, '–î–∞–Ω–Ω—ã–µ –æ –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –∏–º–µ—é—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.');
    }
  }
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
  function sendCollectionInfo(chatId, collectionId) {
    const lastData = cache.get('lastData');
    
    if (lastData && lastData.data && Array.isArray(lastData.data)) {
      const collection = lastData.data.find(item => item.id === collectionId);
      
      if (collection) {
        const formattedCollection = formatCollectionData(collection);
        bot.sendMessage(chatId, formattedCollection, {
          parse_mode: 'Markdown',
          reply_markup: getCollectionButtonsMarkup(collectionId)
        }).then(() => {
          // –ï—Å–ª–∏ —É –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –µ—Å—Ç—å –ª–æ–≥–æ—Ç–∏–ø, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –æ—Ç–¥–µ–ª—å–Ω–æ
          const logo = collection.media?.find(m => m.type === 'logo')?.url;
          if (logo) {
            bot.sendPhoto(chatId, logo, { 
              caption: `–õ–æ–≥–æ—Ç–∏–ø –∫–æ–ª–ª–µ–∫—Ü–∏–∏ "${collection.title}"`,
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üì≤ –û—Ç–∫—Ä—ã—Ç—å –≤ StickerDom', url: `https://t.me/sticker_bot/app?startapp=collection_${collectionId}` }]
                ]
              }
            });
          }
        });
      } else {
        bot.sendMessage(chatId, `–ö–æ–ª–ª–µ–∫—Ü–∏—è —Å ID ${collectionId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`, {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üìã –ö —Å–ø–∏—Å–∫—É –∫–æ–ª–ª–µ–∫—Ü–∏–π', callback_data: 'collections_1' }]
            ]
          }
        });
      }
    } else {
      bot.sendMessage(chatId, '–î–∞–Ω–Ω—ã–µ –æ –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –∏–º–µ—é—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.');
    }
  }
  
} else {
  console.warn('TELEGRAM_BOT_TOKEN –Ω–µ —É–∫–∞–∑–∞–Ω –≤ .env —Ñ–∞–π–ª–µ, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è');
}

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON
app.use(express.json({ limit: '10mb' }));

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–∏–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö
app.post('/api/data', (req, res) => {
  try {
    const data = req.body;
    const key = 'lastData'; // –ö–ª—é—á –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –∫–µ—à–µ
    const oldData = cache.get(key);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
    if (!data) {
      return res.status(400).json({ success: false, message: '–î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç' });
    }

    // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å, –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    if (!oldData) {
      cache.set(key, data);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
      saveData(data);
      
      return res.status(200).json({ success: true, message: '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤–ø–µ—Ä–≤—ã–µ' });
    }

    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏
    if (!deepEqual(oldData, data)) {
      // –î–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      const changes = processDataChanges(oldData, data);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
      cache.set(key, data);
      saveData(data);
      
      return res.status(200).json({ 
        success: true, 
        message: '–î–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
        changes: changes
      });
    }

    // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
    return res.status(200).json({ 
      success: true, 
      message: '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã, –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ'
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞:', error);
    return res.status(500).json({ success: false, message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö
app.get('/api/data', (req, res) => {
  try {
    const lastData = cache.get('lastData');
    
    if (!lastData) {
      return res.status(404).json({ success: false, message: '–î–∞–Ω–Ω—ã–µ –µ—â–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã' });
    }
    
    return res.status(200).json({ 
      success: true, 
      data: lastData
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞:', error);
    return res.status(500).json({ success: false, message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Å–±—Ä–æ—Å–∞ –∫–µ—à–∞ –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
app.post('/api/reset-cache', (req, res) => {
  try {
    // –û—á–∏—â–∞–µ–º –∫–µ—à
    cache.flushAll();
    console.log('–ö–µ—à —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
    const data = loadData();
    if (data) {
      // –ü–æ–º–µ—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–µ—à
      cache.set('lastData', data);
      console.log('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞ –∏ –ø–æ–º–µ—â–µ–Ω—ã –≤ –∫–µ—à');
    }
    
    return res.status(200).json({ 
      success: true, 
      message: '–ö–µ—à —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω –∏ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã' 
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∫–µ—à–∞:', error);
    return res.status(500).json({ success: false, message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–µ—à–∞
app.get('/api/cache', (req, res) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –∏–∑ –∫–µ—à–∞
    const keys = cache.keys();
    const cacheData = {};
    
    // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Å–µ–º –∫–ª—é—á–∞–º
    keys.forEach(key => {
      cacheData[key] = cache.get(key);
    });
    
    return res.status(200).json({
      success: true,
      keys: keys,
      cache: cacheData
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–µ—à–∞:', error);
    return res.status(500).json({ success: false, message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function processDataChanges(oldData, newData) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–π
  if (oldData.data && newData.data && Array.isArray(oldData.data) && Array.isArray(newData.data)) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ —Ç–æ–ª—å–∫–æ –ø–æ—Ä—è–¥–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const oldDataSorted = JSON.stringify([...oldData.data].sort((a, b) => a.id - b.id));
    const newDataSorted = JSON.stringify([...newData.data].sort((a, b) => a.id - b.id));
    
    // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã –ø–æ—Å–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏, –∑–Ω–∞—á–∏—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Ä—è–¥–æ–∫ - –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if (oldDataSorted === newDataSorted) {
      console.log('–ü–æ—Ä—è–¥–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑–º–µ–Ω–∏–ª—Å—è, –Ω–æ —Å–∞–º–∏ –¥–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞–ª–∏—Å—å –ø—Ä–µ–∂–Ω–∏–º–∏. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è.');
      return { added: [], removed: [], updated: [] };
    }
    
    const collectionsChanges = getCollectionsChanges(oldData.data, newData.data);
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö
    if (collectionsChanges.added.length > 0 || collectionsChanges.removed.length > 0 || collectionsChanges.updated.length > 0) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö –æ—Ç–¥–µ–ª—å–Ω–æ
      if (collectionsChanges.added.length > 0) {
        chatIds.forEach(chatId => {
          sendNewCollectionsNotification(chatId, collectionsChanges.added);
        });
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏/—É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
      if (collectionsChanges.removed.length > 0 || collectionsChanges.updated.length > 0) {
        chatIds.forEach(chatId => {
          sendCollectionsChangeNotification(chatId, collectionsChanges, newData.data);
        });
      }
      
      return collectionsChanges;
    }
  }
  
  // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ —Å–≤—è–∑–∞–Ω—ã —Å –∫–æ–ª–ª–µ–∫—Ü–∏—è–º–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–ª–∏—á–∏—è–º–∏
  const differences = getDifference(oldData, newData);
  const message = `üîî *–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –¥–∞–Ω–Ω—ã—Ö:*\n\n${formatDifferences(differences)}`;

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ –≤—Å–µ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ —á–∞—Ç—ã
  chatIds.forEach(chatId => {
    bot.sendMessage(chatId, message, { parse_mode: 'Markdown' })
      .then(() => console.log(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç ${chatId}`))
      .catch(error => console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç ${chatId}:`, error));
  });
  
  return differences;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö
function getCollectionsChanges(oldCollections, newCollections) {
  const changes = {
    added: [],
    removed: [],
    updated: []
  };
  
  // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞–ø—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –ø–æ ID
  const oldCollMap = new Map(oldCollections.map(coll => [coll.id, coll]));
  const newCollMap = new Map(newCollections.map(coll => [coll.id, coll]));
  
  // –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
  for (const [id, newColl] of newCollMap) {
    const oldColl = oldCollMap.get(id);
    if (!oldColl) {
      changes.added.push(newColl);
    } else if (!deepEqual(oldColl, newColl)) {
      changes.updated.push({
        old: oldColl,
        new: newColl,
        id: newColl.id
      });
    }
  }
  
  // –ù–∞—Ö–æ–¥–∏–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
  for (const [id, oldColl] of oldCollMap) {
    if (!newCollMap.has(id)) {
      changes.removed.push(oldColl);
    }
  }
  
  return changes;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ –æ –Ω–æ–≤—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö
function sendNewCollectionsNotification(chatId, newCollections) {
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ Markdown
  function escapeMarkdown(text) {
    if (!text) return '';
    // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown: _ * [ ] ( ) ~ ` > # + - = | { } . !
    return text.toString()
      .replace(/([_*[\]()~`>#+=|{}.!\\-])/g, '\\$1');
  }
  
  // –î–ª—è –∫–∞–∂–¥–æ–π –Ω–æ–≤–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ –∫—Ä–∞—Å–∏–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  newCollections.forEach((collection, index) => {
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    setTimeout(() => {
      // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—á–∏—Ç–∞–Ω–æ"
      const readButtonId = `read_notification_${collection.id}`;
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö
      if (!cache.get('unreadNotifications')) {
        cache.set('unreadNotifications', {});
      }
      const unreadNotifications = cache.get('unreadNotifications');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
      if (unreadNotifications[`${chatId}_${collection.id}`]) {
        console.log(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ ${collection.id} –≤ —á–∞—Ç–µ ${chatId} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
        return;
      }
      
      unreadNotifications[`${chatId}_${collection.id}`] = {
        collection,
        chatId,
        notificationCount: 0,
        intervalId: null,
        messageIds: [] // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —ç—Ç–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
      };
      cache.set('unreadNotifications', unreadNotifications);
      
      const message = `üéâ *–ù–û–í–ê–Ø –ö–û–õ–õ–ï–ö–¶–ò–Ø –î–û–ë–ê–í–õ–ï–ù–ê!*\n\n${formatCollectionData(collection)}`;
      
      bot.sendMessage(chatId, message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üì≤ –û—Ç–∫—Ä—ã—Ç—å –≤ StickerDom', url: `https://t.me/sticker_bot/app?startapp=collection_${collection.id}` }
            ],
            [
              { text: '‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ', callback_data: readButtonId }
            ]
          ]
        }
      }).then((sentMessage) => {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
        const unreadNotifications = cache.get('unreadNotifications');
        if (unreadNotifications[`${chatId}_${collection.id}`]) {
          unreadNotifications[`${chatId}_${collection.id}`].messageIds.push(sentMessage.message_id);
          cache.set('unreadNotifications', unreadNotifications);
        }
        
        // –ï—Å–ª–∏ —É –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –µ—Å—Ç—å –ª–æ–≥–æ—Ç–∏–ø, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –æ—Ç–¥–µ–ª—å–Ω–æ
        const logo = collection.media?.find(m => m.type === 'logo')?.url;
        if (logo) {
          bot.sendPhoto(chatId, logo, { 
            caption: `–õ–æ–≥–æ—Ç–∏–ø –Ω–æ–≤–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ "${escapeMarkdown(collection.title)}"`,
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üì≤ –û—Ç–∫—Ä—ã—Ç—å –≤ StickerDom', url: `https://t.me/sticker_bot/app?startapp=collection_${collection.id}` }],
                [{ text: '‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ', callback_data: readButtonId }]
              ]
            }
          }).then((photoMessage) => {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ
            const unreadNotifications = cache.get('unreadNotifications');
            if (unreadNotifications[`${chatId}_${collection.id}`]) {
              unreadNotifications[`${chatId}_${collection.id}`].messageIds.push(photoMessage.message_id);
              cache.set('unreadNotifications', unreadNotifications);
            }
          });
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        const notificationData = unreadNotifications[`${chatId}_${collection.id}`];
        
        if (notificationData) {
          notificationData.intervalId = setInterval(() => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –µ—â–µ —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            const currentNotifications = cache.get('unreadNotifications') || {};
            if (!currentNotifications[`${chatId}_${collection.id}`]) {
              clearInterval(notificationData.intervalId);
              return;
            }
            
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            notificationData.notificationCount++;
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            bot.sendMessage(chatId, 
              `‚ö†Ô∏è *–ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï: –ù–û–í–ê–Ø –ö–û–õ–õ–ï–ö–¶–ò–Ø!*\n\n–ö–æ–ª–ª–µ–∫—Ü–∏—è "${escapeMarkdown(collection.title)}" –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞.\n–≠—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ‚Ññ${notificationData.notificationCount}`, {
              parse_mode: 'Markdown',
              reply_markup: {
                inline_keyboard: [
                  [
                    { text: 'üì≤ –û—Ç–∫—Ä—ã—Ç—å –≤ StickerDom', url: `https://t.me/sticker_bot/app?startapp=collection_${collection.id}` }
                  ],
                  [
                    { text: '‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ', callback_data: readButtonId }
                  ]
                ]
              }
            }).then((reminderMessage) => {
              // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
              const currentNotifications = cache.get('unreadNotifications') || {};
              if (currentNotifications[`${chatId}_${collection.id}`]) {
                currentNotifications[`${chatId}_${collection.id}`].messageIds.push(reminderMessage.message_id);
                cache.set('unreadNotifications', currentNotifications);
              }
            });
          }, 2000); // –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤ 2 —Å–µ–∫—É–Ω–¥—ã
          
          unreadNotifications[`${chatId}_${collection.id}`].intervalId = notificationData.intervalId;
          cache.set('unreadNotifications', unreadNotifications);
        }
      }).catch(error => 
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–æ–≤–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏:`, error)
      );
    }, index * 1500); // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö (–∫—Ä–æ–º–µ –Ω–æ–≤—ã—Ö)
function sendCollectionsChangeNotification(chatId, changes, newCollections) {
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ Markdown
  function escapeMarkdown(text) {
    if (!text) return '';
    // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown: _ * [ ] ( ) ~ ` > # + - = | { } . !
    return text.toString()
      .replace(/([_*[\]()~`>#+=|{}.!\\-])/g, '\\$1');
  }
  
  let message = 'üîî *–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–π —Å—Ç–∏–∫–µ—Ä–æ–≤*\n\n';
  
  // –£–¥–∞–ª–µ–Ω–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
  if (changes.removed.length > 0) {
    message += `‚ùå *–£–¥–∞–ª–µ–Ω—ã –∫–æ–ª–ª–µ–∫—Ü–∏–∏ (${changes.removed.length}):*\n`;
    changes.removed.forEach(coll => {
      message += `- ID ${coll.id}: ${escapeMarkdown(coll.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n`;
    });
    message += '\n';
  }
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
  if (changes.updated.length > 0) {
    message += `üìù *–û–±–Ω–æ–≤–ª–µ–Ω—ã –∫–æ–ª–ª–µ–∫—Ü–∏–∏ (${changes.updated.length}):*\n`;
    changes.updated.forEach(change => {
      message += `- ID ${change.id}: ${escapeMarkdown(change.new.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n`;
    });
    message += '\n';
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
  if (newCollections && newCollections.length > 0) {
    message += `‚ú® *–î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ (${newCollections.length}):*\n`;
    newCollections.forEach(coll => {
      message += `- ID ${coll.id}: ${escapeMarkdown(coll.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n`;
    });
    message += '\n';
    message += '–î–ª—è –∫–∞–∂–¥–æ–π –Ω–æ–≤–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.\n';
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π
  bot.sendMessage(chatId, message, {
    parse_mode: 'Markdown',
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üìã –°–ø–∏—Å–æ–∫ –∫–æ–ª–ª–µ–∫—Ü–∏–π', callback_data: 'collections_1' }],
        [{ text: 'üì≤ –û—Ç–∫—Ä—ã—Ç—å StickerDom', url: 'https://t.me/sticker_bot/app' }]
      ]
    }
  }).catch(error => {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö:', error);
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π Markdown, –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if (error.response && error.response.statusCode === 400 && error.response.body && error.response.body.description && error.response.body.description.includes("can't parse entities")) {
      console.log('–û—à–∏–±–∫–∞ —Å Markdown —Ä–∞–∑–º–µ—Ç–∫–æ–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      // –£–¥–∞–ª—è–µ–º —Å–∏–º–≤–æ–ª—ã —Ä–∞–∑–º–µ—Ç–∫–∏ Markdown
      const cleanMessage = message.replace(/[*_`]/g, '');
      bot.sendMessage(chatId, cleanMessage, {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üìã –°–ø–∏—Å–æ–∫ –∫–æ–ª–ª–µ–∫—Ü–∏–π', callback_data: 'collections_1' }],
            [{ text: 'üì≤ –û—Ç–∫—Ä—ã—Ç—å StickerDom', url: 'https://t.me/sticker_bot/app' }]
          ]
        }
      });
    }
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–∏–π –º–µ–∂–¥—É –æ–±—ä–µ–∫—Ç–∞–º–∏
function getDifference(oldObj, newObj) {
  const differences = {};

  // –ò—â–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –Ω–æ–≤–æ–º –æ–±—ä–µ–∫—Ç–µ
  Object.keys(newObj).forEach(key => {
    // –ï—Å–ª–∏ –∫–ª—é—á –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å—Ç–∞—Ä–æ–º –æ–±—ä–µ–∫—Ç–µ –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç–ª–∏—á–∞—é—Ç—Å—è
    if (!oldObj.hasOwnProperty(key) || !deepEqual(oldObj[key], newObj[key])) {
      differences[key] = {
        old: oldObj[key],
        new: newObj[key]
      };
    }
  });

  // –ò—â–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏
  Object.keys(oldObj).forEach(key => {
    if (!newObj.hasOwnProperty(key)) {
      differences[key] = {
        old: oldObj[key],
        new: undefined
      };
    }
  });

  return differences;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–∏–π –¥–ª—è —á–∏—Ç–∞–µ–º–æ–≥–æ –≤—ã–≤–æ–¥–∞ –≤ Telegram
function formatDifferences(differences) {
  let message = '';
  
  Object.keys(differences).forEach(key => {
    const diff = differences[key];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–æ–º –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–º
    const isOldComplex = diff.old && typeof diff.old === 'object';
    const isNewComplex = diff.new && typeof diff.new === 'object';
    
    let oldValue, newValue;
    
    if (isOldComplex) {
      oldValue = Array.isArray(diff.old) ? 
        `–º–∞—Å—Å–∏–≤ –∏–∑ ${diff.old.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤` : 
        `–æ–±—ä–µ–∫—Ç —Å ${Object.keys(diff.old).length} —Å–≤–æ–π—Å—Ç–≤–∞–º–∏`;
    } else {
      oldValue = diff.old !== undefined ? String(diff.old) : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç';
    }
    
    if (isNewComplex) {
      newValue = Array.isArray(diff.new) ? 
        `–º–∞—Å—Å–∏–≤ –∏–∑ ${diff.new.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤` : 
        `–æ–±—ä–µ–∫—Ç —Å ${Object.keys(diff.new).length} —Å–≤–æ–π—Å—Ç–≤–∞–º–∏`;
    } else {
      newValue = diff.new !== undefined ? String(diff.new) : '—É–¥–∞–ª–µ–Ω–æ';
    }
    
    message += `*–ü–æ–ª–µ*: \`${key}\`\n`;
    message += `*–ë—ã–ª–æ*: ${oldValue}\n`;
    message += `*–°—Ç–∞–ª–æ*: ${newValue}\n\n`;
  });
  
  return message || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è';
}

// –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ—Ä–Ω–µ–≤–æ–≥–æ URL - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
  const html = `
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>StickerBot - Telegram –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å—Ç–∏–∫–µ—Ä–∞—Ö</title>
  <style>
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      margin: 0;
      padding: 0;
      background-color: #f5f5f5;
      color: #333;
      line-height: 1.6;
    }
    .container {
      max-width: 800px;
      margin: 0 auto;
      padding: 20px;
    }
    header {
      background-color: #0088cc;
      color: white;
      padding: 20px 0;
      text-align: center;
      border-radius: 8px;
      margin-bottom: 30px;
    }
    h1 {
      margin: 0;
      font-size: 36px;
    }
    h2 {
      color: #0088cc;
      border-bottom: 2px solid #eee;
      padding-bottom: 10px;
      margin-top: 30px;
    }
    .features {
      display: flex;
      flex-wrap: wrap;
      justify-content: space-between;
      margin: 30px 0;
    }
    .feature {
      background: white;
      border-radius: 8px;
      padding: 20px;
      margin-bottom: 20px;
      width: calc(50% - 15px);
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      box-sizing: border-box;
    }
    .feature h3 {
      color: #0088cc;
      margin-top: 0;
    }
    .cta {
      text-align: center;
      background-color: white;
      padding: 30px;
      border-radius: 8px;
      margin: 30px 0;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    .btn {
      display: inline-block;
      background-color: #0088cc;
      color: white;
      padding: 12px 25px;
      border-radius: 5px;
      text-decoration: none;
      font-weight: bold;
      transition: background-color 0.3s;
    }
    .btn:hover {
      background-color: #006699;
    }
    footer {
      text-align: center;
      margin-top: 40px;
      padding: 20px;
      color: #666;
      font-size: 14px;
    }
    @media (max-width: 768px) {
      .feature {
        width: 100%;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <header>
      <h1>StickerBot</h1>
      <p>Telegram –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö —Å—Ç–∏–∫–µ—Ä–∞—Ö StickerDom</p>
    </header>
    
    <section>
      <h2>–û –±–æ—Ç–µ</h2>
      <p>StickerBot ‚Äî —ç—Ç–æ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–≤–µ–¥–æ–º–ª—è–µ—Ç –≤–∞—Å –æ –Ω–æ–≤—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö —Å—Ç–∏–∫–µ—Ä–æ–≤ –∏ –∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö. –ü–æ–¥–ø–∏—Å–∞–≤—à–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –≤—ã –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≤ –∫—É—Ä—Å–µ —Å–≤–µ–∂–∏—Ö —Ä–µ–ª–∏–∑–æ–≤ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ StickerDom.</p>
    </section>
    
    <section class="features">
      <div class="feature">
        <h3>üîî –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h3>
        <p>–ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö —Å—Ç–∏–∫–µ—Ä–æ–≤ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∏—Ö –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.</p>
      </div>
      <div class="feature">
        <h3>üìã –°–ø–∏—Å–æ–∫ –∫–æ–ª–ª–µ–∫—Ü–∏–π</h3>
        <p>–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π –ø—Ä—è–º–æ –≤ —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.</p>
      </div>
      <div class="feature">
        <h3>üîç –ü–æ–∏—Å–∫ –∫–æ–ª–ª–µ–∫—Ü–∏–π</h3>
        <p>–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –Ω—É–∂–Ω–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º.</p>
      </div>
      <div class="feature">
        <h3>üìä –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏</h3>
        <p>–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.</p>
      </div>
    </section>
    
    <div class="cta">
      <h2>–ù–∞—á–Ω–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å</h2>
      <p>–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ —Ç—ã—Å—è—á–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –ø–æ–ª—É—á–∞—é—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö —Å—Ç–∏–∫–µ—Ä–æ–≤!</p>
      <a href="https://t.me/sticker_bot" class="btn">–û—Ç–∫—Ä—ã—Ç—å –±–æ—Ç–∞ –≤ Telegram</a>
    </div>
    
    <footer>
      <p>&copy; ${new Date().getFullYear()} StickerBot. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.</p>
    </footer>
  </div>
</body>
</html>
  `;
  
  res.send(html);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(port, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
  console.log(`CORS –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –¥–æ–º–µ–Ω–∞: https://stickerdom.store`);
}); 